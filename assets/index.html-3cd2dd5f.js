import{_ as t,M as e,p,q as o,R as n,t as l,N as c,a1 as a}from"./framework-96b046e1.js";const u="/study/images/java/09-internal-directory.png",i="/study/images/java/10-java-module-prevent.png",d="/study/images/java/04-create-module-info.png",r="/study/images/java/05-can-not-create-another-module-info.png",k="/study/images/java/06-module-from-existing-sources.png",m="/study/images/java/07-import-from-hello-module.png",v="/study/images/java/08-set-requires-in-main-module.png",g={},b=a('<h1 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List <!-- omit in toc --></h1><ul><li><a href="#reflection-and-java-module">reflection and Java module</a></li><li><a href="#set-up-java-modules-in-intellij">Set up Java modules in Intellij</a></li></ul><h1 id="reflection-and-java-module" tabindex="-1"><a class="header-anchor" href="#reflection-and-java-module" aria-hidden="true">#</a> reflection and Java module</h1>',3),y={href:"https://github.com/jayground8/study-example/tree/main/example-maven-multi-modules",target:"_blank",rel:"noopener noreferrer"},j=a(`<p>이제 <code>World</code> 클래스를 아래처럼 작성해본다. <code>country</code>가 private field로 있다.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">World</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">World</span><span class="token punctuation">(</span><span class="token class-name">String</span> country<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> country<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;world2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 reflection API를 사용하면 아래처럼 private field도 이렇게 접근해서 설정해버릴 수도 있다.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token class-name">World</span> world <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">World</span><span class="token punctuation">(</span><span class="token string">&quot;Korea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> worldClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;io.jayground8.hello.internal.World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Field</span> countryField <span class="token operator">=</span> worldClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;country&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  countryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  countryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>world<span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>world<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 public class는 어떤 package의 경로를 두던 다 접근 가능하다. internal이라고 이제 패키지 밖으로 공개하고 싶지 않지만 public으로 설정해야 되는 class가 있다라고 하면 패키지를 사용하는 사람이 원하면 접근해서 사용할 수 있다. 이렇게 특정 구현체에 의존하게 되면 해당 package가 변경되었을 때 의존하는 어플리케이션에 오류를 발생할 가능성이 높아진다.</p><p><img src="`+u+`" alt="internal directory"></p><p>이제 <code>package-info.java</code>를 정의해서 Java module를 정의해보면 어떻게 될까?</p><p>먼저 hello module에서 io.jayground8.hello만 명시적으로 노출했기 때문에, io.jayground8.hello.internal.World 클래스가 public이지만 접근 할 수 없게 된다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module hello {
    exports io.jayground8.hello;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그래서 Intellij에서 친절하게 이렇게 에러가 보이는 것을 확인할 수 있다.</p><p><img src="`+i+'" alt="java module prevent access internal"></p><p>그리고 reflection은 어떻게 될까? <code>java.lang.reflect.InaccessibleObjectException: Unable to make field private java.lang.String io.jayground8.hello.internal.World.country accessible: module hello does not &quot;opens io.jayground8.hello.internal&quot; to module app</code> 처럼 에러가 나는 것을 확인 할 수 있다.</p><h1 id="set-up-java-modules-in-intellij" tabindex="-1"><a class="header-anchor" href="#set-up-java-modules-in-intellij" aria-hidden="true">#</a> Set up Java modules in Intellij</h1><p>Java9에서 적용된 module을 테스트해보기 위해서 IntelliJ에서 project structure부터 셋팅을 해야했다. Project에 <code>hello.module</code>과 <code>main.module</code>을 구성하려고 하였다.</p><p>Intellij에서 empty project 생성</p><p><code>hello.module</code>과 <code>main.module</code> 디렉터리를 두개 생성하고, src 디렉터리를 만들고 <code>Sources root</code>으로 변경한다. 그리고 이제 <code>main.module</code>에 <code>module-info.java</code> 파일을 추가한다.</p><p><img src="'+d+'" alt="create module-info.java"></p><p>그리고 <code>hello.module</code>에도 <code>module-info.java</code>를 동일하게 생성하려고 하지만, 보이지 않는다.</p><p><img src="'+r+'" alt="can not create other module-info.java"></p><p>하나의 프로젝트에서 복수의 모듈을 가질 수가 없게 되어서 <code>module-info.java</code>를 Intellij에서 생성을 할 수가 없었다. 그래서 <code>hello.module</code>과 <code>main.module</code>을 별도의 Intellij module(Java module과 별개로 Intellij에서 module이라는 단위로 구분을 한다)으로 설정을 해주었다. 새로 module을 생성할 때는 empty module 옵션이 없어서 import from exisiting sources 메뉴로 <code>hello.module</code>과 <code>main.module</code>의 디렉토리를 module로 생성하였다.</p><p><img src="'+k+`" alt="new moudle from existing sources"></p><p>먼저 <code>hello.module</code> 간단하게 아래처럼 <code>Hello</code>와 <code>World</code> 클래스를 만들었다.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 <code>module-info.java</code>에서 <code>exports</code>로 다른 모듈에서 사용할 수 있도록 정의한다.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">hello<span class="token punctuation">.</span>module</span> <span class="token punctuation">{</span>
    <span class="token keyword">exports</span> <span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>main.module</code>에서 사용해볼 때, 이렇게 Intellij에서 자동으로 셋팅을 할 수가 있다.</p><p><img src="`+m+'" alt="import from hello module"></p><p><img src="'+v+`" alt="set requires in main module"></p><p>그리고 짜잔 될줄 알았지만 <code>java: too many module declarations found</code> 에러가 발생하였다. empty project로 생성할 때 root directory가 Intellij module로 설정되어 있었고 아래처럼 정의가 되어 있었다. 이제 sourceFolder가 아래처럼 정의가 되어 있기 때문에 package-info.java가 하나가 아니라 여러개를 가지고 build를 하려고 해서 실패하는 것이었다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GENERAL_MODULE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>NewModuleRootManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inherit-compiler-output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude-output</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file://$MODULE_DIR$<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file://$MODULE_DIR$/hello.module/src<span class="token punctuation">&quot;</span></span> <span class="token attr-name">isTestSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file://$MODULE_DIR$/main.module/src<span class="token punctuation">&quot;</span></span> <span class="token attr-name">isTestSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>content</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>orderEntry</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sourceFolder<span class="token punctuation">&quot;</span></span> <span class="token attr-name">forTests</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>따라서 별도의 모듈로 <code>hello.module</code>과 <code>main.module</code>을 정의해줬기 때문에, 아래처럼 삭제해주고 Main을 실행하였다..</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GENERAL_MODULE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>NewModuleRootManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inherit-compiler-output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude-output</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>main</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">Hello</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jayground8<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">World</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">World</span><span class="token punctuation">.</span><span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 정상적으로 console <code>hello</code>와 <code>world</code>가 찍히는 것을 확인할 수 있다.</p>`,35);function h(q,f){const s=e("ExternalLinkIcon");return p(),o("div",null,[b,n("p",null,[n("a",y,[l("예제"),c(s)])]),j])}const x=t(g,[["render",h],["__file","index.html.vue"]]);export{x as default};
